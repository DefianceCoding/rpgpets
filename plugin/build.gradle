configurations {
    server {
        transitive = false
    }
    serverPlugin {
        transitive = false
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:$spigotApiVersion"

    compile project(":api")
    compile project(":v1_11_R1")
    compile project(":v1_12_R1")
    compileOnly "com.comphenix.protocol:ProtocolLib-API:$protocolLibVersion"

    server "org.spigotmc:spigot:$spigotServerVersion"

    serverPlugin "com.comphenix.protocol:ProtocolLib:$protocolLibVersion"
    serverPlugin "com.sk89q.worldguard:worldguard:6.2.1"
    serverPlugin "com.sk89q.worldedit:worldedit:6.1.7"
    serverPlugin "com.alessiodp.parties:Parties:1.7.6"
}

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

jar.baseName = "RPGPets"

processResources {
    filesMatching("**/plugin.yml") {
        filter {
            it.replace('@version@', project.getVersion())
        }
    }
}

task installPlugins(type: Copy) {
    print("Installing required plugins ... ")
    from(configurations.serverPlugin)
    into "$rootDir/testserver/plugins"
    rename("([^-]*).*\\.jar", '$1.jar')
    println("Done.")
}

task installServer(type: Copy) {
    print("Installing spigot server ... ")
    from(configurations.server)
    into "$rootDir/testserver/"
    rename { 'spigot.jar' }
    println("Done.")
    installPlugins.execute()
}

task install(type: Copy) {
    from("$rootDir/plugin/build/libs/") {
        include "**/RPGPets-*.jar"
    }
//    from("$rootDir/example-plugin/build/libs/") {
//        include "**/ExamplePlugin-*.jar"
//    }
    rename("([^-]*).*\\.jar", '$1.jar')
    into "$rootDir/testserver/plugins/"
}
